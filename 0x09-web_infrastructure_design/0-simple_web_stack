A server is a specialized computer or software system designed to provide services, data, or resources to other computers (known as clients) over a network. Servers handle tasks such as data storage, website hosting, email management, and application execution. They operate on a client-server model, where clients request specific services, and servers fulfill those requests1.
Role of the domain name:
The domain name serves as a human-readable address for websites. It translates into an IP address (like 192.168.1.1) that computers use to locate specific web resources. DNS (Domain Name System) translates domain names to IP addresses, allowing users to access websites using familiar names instead of complex numeric addresses2.
Type of DNS record for www in www.foobar.com:
The DNS record for www in www.foobar.com is a CNAME (Canonical Name) record. It creates an alias for the domain, allowing multiple domain names to point to the same website3.
Role of the web server:
A web server stores, processes, and delivers web pages to users’ browsers. It handles HTTP requests, serving static files (like HTML, CSS, and images) and dynamic content (generated by application servers). Web servers ensure secure and efficient data interchange between clients and hosted resources4.
Role of the application server:
An application server sits between the database server (storing application data) and the web server (communicating with clients). It executes business logic, processes dynamic requests, and delivers content. Application servers optimize traffic, add security, and support web, native, and mobile applications5.
Role of the database:
The database stores structured data used by applications. It holds information like user profiles, product details, and transaction records. Application servers interact with databases to retrieve, update, and manage data6.
Communication with user’s computer:
The server communicates with the user’s computer via HTTP (Hypertext Transfer Protocol). When a browser requests a file (e.g., a webpage), the server processes the request and sends the content back to the browser over HTTP4.
Issues with this infrastructure:

Single Point of Failure (SPOF):
Having a single critical component (e.g., a central server) can lead to system failure if it malfunctions. To mitigate SPOF, redundancy and failover mechanisms are essential.
Downtime during maintenance:
When deploying new code or performing maintenance, web servers may need to be restarted. During this downtime, users cannot access the website. Proper planning and scheduling are crucial to minimize disruptions.
Scalability limitations:
If incoming traffic exceeds the server’s capacity, the infrastructure cannot scale effectively. Load balancing, caching, and horizontal scaling are strategies to address this limitation.
